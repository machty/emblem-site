-
  title: Tags

  docs: |
    You can wrap content within an html5 element by just writing the element name at the beginning of a line.

    This is supported for all valid html5 tags (list [here](https://developer.mozilla.org/en-US/docs/HTML/HTML5/HTML5_element_list).)

    To use a non-html5 tag, just start the line with `%`.

  emblem: |
    h1 Welcome to Emblem

    %blink buy it on Kozmo.com

  html: |
    <h1>Welcome to Emblem</h1>

    <blink>buy it on Kozmo.com</blink>


-
  title: Indentation Wrapping

  docs: |
    To wrap one element in another, just indent and place the element below.

  emblem: |
    footer
      ul
        li Hello
        li Goodbye

  html: |
    <footer>
      <ul>
        <li>Hello</li>
        <li>Goodbye</li>
      </ul>
    </footer>



-
  title: CSS Classes

  docs: |
    CSS classes can added to elements by using a (`.`) with the class name afterwards. You can place this after an element name (`div` is the default tag name).

    You can chain multiple class names.

  emblem: |
    .title Title

    h1.logo Law Blog

    button.btn.btn-large Submit

  html: |
    <div class="title">Title</div>

    <h1 class="logo">Law Blog</h1>

    <button class="btn btn-large">Submit</button>


-
  title: IDs

  docs: |
    Element IDs can be added to elements by using `#` before the element id. Like CSS classes, you can provide an element name (`div` is the default tag name).

  emblem: |
    #page-content Content

    span#name Bob Lablah

  html: |
    <div id="page-content">Content</div>

    <span id="name">Bob Lablah</span>


-
  title: HTML Attributes

  docs: |
    HTML attributes can be added right after the element, using `key="value"` pairs.

    HTML attributes can also have mustaches embedded in them, though make sure to use the `unbound` helper in an Ember setting. Note the exclamation mark shorthand for setting an HTML attribute to an unbound property in an Ember setting.

  emblem: |
    button.close data-dismiss="modal" x

    / For Vanilla Handlebars mode only
    button class="large {{foo}}" x

    / For Ember Handlebars
    button class="large {{unbound foo}}" x

    / Shorthand for Ember
    button class=foo! x



  html: |
    <button class="close" data-dismiss="dropdown">x</button>

    <button class="large {{foo}}">x</button>

    <button class="large {{unbound foo}}">x</button>

    <button class="{{unbound foo}}">x</button>

-
  title: Comments

  docs: |
    Start a line with `/` to add a comment. These lines will be ignored completely.

    Multiline comments are supported by indenting your comment underneath.

  emblem: |
    / Some comment

    / A long long
      multiline comment

-
  title: Plain Text

  docs: |
    To output content without an element wrapper, start the line with pipe `|`.

    Multiline plaintext content is supported by indenting underneath the tag or `|`.

    Plain text can include handlebars output tags `{{}}` and `{{{}}}`. You can also use `#{}` as an alias for `{{}}`.

  emblem: |
    | Some content

    p
      | Lorem ipsum dolor sit amet, consectetur adipisicing elit,
        sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
        nisi ut aliquip ex ea commodo consequat.

    span.name Your name is {{name}}
              and my name is #{author}

  html: |
    Some content

    <p>
      Lorem ipsum dolor sit amet, consectetur adipisicing elit,
      sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
      nisi ut aliquip ex ea commodo consequat.
    </p>

    <span class="name">Your name is {{name}} and my name is {{author}}</span>

-
  title: Handlebars Expressions

  docs: |
    To output a handlebars expression, use `=` before expression.

    NOTE: You have the option to omit the `=` unless the expression begins with a [known HTML5 tag name](https://developer.mozilla.org/en-US/docs/HTML/HTML5/HTML5_element_list).

  emblem: |
    h1 = name
    p
      = intro
      = highlight name

  html: |
    <h1>{{name}}</h1>
    <p>
      {{intro}}
      {{hightlight name}}
    </p>


-
  title: Unescaped Expressions

  docs: |
    By default Handlebars html escapes output from expressions. To include html without escaping, use `==` which will output Handlebars "triple-stash" expressions `{{{}}}`.

  emblem: |
    body
      == outlet

  html: |
    <body>
      {{{outlet}}}
    </body>


-
  title: Handlebars Block Helpers

  docs: |
    Handlebars block statements follow a syntax similar to HTML5 elements, in that indented content on the lines below get wrapped in the block form of the helper.

    To use a block helper with the same name as an HTML5 element, you can explicitly use a handlebars block helper by starting the line with `=`.

    Block helpers with only text content can be succinctly written on a single line using a `|` pipe to separate the helper code from the text.

  emblem: |
    ul
      each person in people
        li = person

    linkTo "home" | Link Text

    list nav id="nav-bar" class="top"
      a href="url" = title

    = strong
      = something

  html: |
    <ul>
      {{#each person in people}}
        <li>{{person}}</li>
      {{/each}}
    </ul>

    {{#linkTo "home"}}
      Link Text
    {{/linkTo}}

    {{list nav id="nav-bar" class="top"}}
      <a href="{{url}}">{{title}}</a>
    {{/list}}

    {{#strong}}
      {{something}}
    {{/strong}}


-
  title: Views

  ember: true

  docs: |
    You can quickly and easily include an Ember.js view by starting a line with a capitalized letter. This will automatically wrap the line with a `{{view}}` helper.

  emblem: |
    .field
      Ember.TextField valueBinding="firstName"

  html: |
    <div class="field">
      {{view Ember.TextField valueBinding="firstName"}}
    </div>


-
  title: Implicit Bind Attributes

  ember: true

  docs: |
    Emblem.js makes binding expression attributes (via `bindAttr`) clean and simple.


  emblem: |
    img src=logoUrl alt="Logo"

  html: |
    <img {{bindAttr src="logoUrl"}} alt="Logo">


-
  title: Implicit Event Handlers

  ember: true

  docs: |
    Emblem.js makes handling expression attributes (such as `bindAttr` and `action`) clean and easy.

  emblem: |
    a click="toggleHeader" x

    a click="toggleHeader this" x

  html: |
    <a {{action "toggleHeader" on="click"}}>x</a>

    <a {{action "toggleHeader" this on="click"}}>x</a>

-
  title: Explicit Attribute Expressions

  ember: true

  docs: |
    To use expressions within the element attributes (often used in Ember with `bindAttr` and `action`), use the `{}` syntax after the element.

    Multiple attribute expressions are also supported.

  emblem: |
    button{action "delete"} Delete

    img{bindAttr src="logoUrl"} alt="logo"

    a{bindAttr class="isActive"}{action 'toggleHeader'} x

  html: |
    <button {{action "delete"}}>Delete</button>

    <img {{bindAttr src="logoUrl"}} alt="logo">

    <a {{bindAttr class="isActive"}} {{action "toggleHeader"}}>x</a>


-
  title: Vanilla Handlebars Partials

  docs: |
    To invoke partials with non-Emberized Handlebars, you can use the `>` syntax.

    Note that you'll never really use this for Ember apps; rather, in those cases, you'd use the `partial` helper.

    Also note that there's no good way to precompile partials other than to precompile them as templates and then run `Handlebars.partials = Handlebars.templates` before any rendering has taken place.

    If you're not precompiling, and you want to directly register an Emblem template, you can use `Emblem.registerPartial`. 

  emblem: |
    > partialName

    p Check out this partial: #{> partialName}

    > partialName foo

  html: |
    {{>partialName}}

    <p>Check out this partial: {{>partialName}}</p>

    {{>partialName foo}}

-
  title: Anything wrong or missing here?

  docs: |
    These docs are [open source](https://github.com/machty/emblem-site), so help us tweak and refine them!

    If you're feeling particularly lazy and want to just report an error, [Submit a docs issue](https://github.com/machty/emblem-site/issues/new?title=emblem.js%20plz%20help)
    for some clarification on how Emblem.js can be used.



# # Title
# -
#   docs: |
#     ### Title
#     description
#   emblem: |
#     Emblem
#   html: |
#     Html result
