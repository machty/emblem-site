-
  title: Tags

  docs: |
    You can wrap content within an html5 element by just writing the element name at the beginning of a line.

    This is supported for all valid html5 tags (list [here](https://developer.mozilla.org/en-US/docs/HTML/HTML5/HTML5_element_list).)

    To use a non-html5 tag, just start the line with `%`.

  emblem: |
    h1 Welcome to Emblem

    %blink buy it on Kozmo.com

  html: |
    <h1>Welcome to Emblem</h1>

    <blink>buy it on Kozmo.com</blink>


-
  title: Indentation Wrapping

  docs: |
    To wrap one element in another, just indent and place the element below.

  emblem: |
    footer
      ul
        li Hello
        li Goodbye

  html: |
    <footer>
      <ul>
        <li>Hello</li>
        <li>Goodbye</li>
      </ul>
    </footer>



-
  title: CSS Classes

  docs: |
    CSS classes can added to elements by using a (`.`) with the class name afterwards. You can place this after an element name (`div` is the default tag name).

    You can chain multiple class names.

  emblem: |
    .title Title

    h1.logo Law Blog

    button.btn.btn-large Submit

  html: |
    <div class="title">Title</div>

    <h1 class="logo">Law Blog</h1>

    <button class="btn btn-large">Submit</button>


-
  title: IDs

  docs: |
    Element IDs can be added to elements by using `#` before the element id. Like CSS classes, you can provide an element name (`div` is the default tag name).

  emblem: |
    #page-content Content

    span#name Bob Lablah

  html: |
    <div id="page-content">Content</div>

    <span id="name">Bob Lablah</span>


-
  title: HTML Attributes

  docs: |
    HTML attributes can be added right after the element, using `key="value"` pairs.

    HTML attributes can also have mustaches embedded in them, though make sure to use the `unbound` helper in an Ember setting. Note the exclamation mark shorthand for setting an HTML attribute to an unbound property in an Ember setting.

  emblem: |
    button.close data-dismiss="modal" x

    / For Vanilla Handlebars mode only
    button class="large {{foo}}" x

    / For Ember Handlebars
    button class="large {{unbound foo}}" x

    / Shorthand for Ember
    button class=foo! x



  html: |
    <button class="close" data-dismiss="dropdown">x</button>

    <button class="large {{foo}}">x</button>

    <button class="large {{unbound foo}}">x</button>

    <button class="{{unbound foo}}">x</button>

-
  title: Comments

  docs: |
    Start a line with `/` to add a comment. These lines will be ignored completely.

    Multiline comments are supported by indenting your comment underneath.

  emblem: |
    / Some comment

    / A long long
      multiline comment

-
  title: Plain Text

  docs: |
    To output content without an element wrapper, start the line with pipe `|`.

    Multiline plaintext content is supported by indenting underneath the tag or `|`.

    Plain text can include handlebars output tags `{{}}` and `{{{}}}`. You can also use `#{}` as an alias for `{{}}`.

    Block helpers within text blocks can also be used if you're using the `:` colon or `|` pipe syntax.

    Use an apostrophe `'` instead of `|` to append a single trailing whitespace at the end of the text block.

  emblem: |
    | Some content

    p
      | Lorem #{linkTo 'something' | ipsum} dolor sit amet, consectetur 
        adipisicing elit, sed do eiusmod tempor incididunt ut labore et 
        dolore magna aliqua.  Ut enim ad minim veniam, quis nostrud 
        exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

    span.name Your name is {{name}}
              and my name is #{author}

    span
      ' Trailing space

  html: |
    Some content

    <p>
      Lorem {{#linkTo something}}ipsum{{/linkTo}} dolor sit amet, 
      consectetur adipisicing elit, sed do eiusmod tempor incididunt
      ut labore et dolore magna aliqua.  Ut enim ad minim veniam, 
      quis nostrud exercitation ullamco laboris nisi ut aliquip 
      ex ea commodo consequat.
    </p>

    <span class="name">Your name is {{name}} and my name is {{author}}</span>

    <span>Trailing space </span>

-
  title: Handlebars Expressions

  docs: |
    To output a handlebars expression, use `=` before expression.

    NOTE: You have the option to omit the `=` unless the expression begins with a [known HTML5 tag name](https://developer.mozilla.org/en-US/docs/HTML/HTML5/HTML5_element_list).

  emblem: |
    h1 = name
    p
      = intro
      = highlight name

  html: |
    <h1>{{name}}</h1>
    <p>
      {{intro}}
      {{hightlight name}}
    </p>


-
  title: Unescaped Expressions

  docs: |
    By default Handlebars html escapes output from expressions. To include html without escaping, use `==` which will output Handlebars "triple-stash" expressions `{{{}}}`.

  emblem: |
    body
      == outlet

  html: |
    <body>
      {{{outlet}}}
    </body>


-
  title: Handlebars Block Helpers

  docs: |
    Handlebars block statements follow a syntax similar to HTML5 elements, in that indented content on the lines below get wrapped in the block form of the helper.

    To use a block helper with the same name as an HTML5 element, you can explicitly use a handlebars block helper by starting the line with `=`.

    Block helpers with only text content can be succinctly written on a single line using a `|` pipe to separate the helper code from the text.

  emblem: |
    ul
      each person in people
        li = person

    linkTo "home" | Link Text

    list nav id="nav-bar" class="top"
      a href="url" = title

    = strong
      = something

    if something
      p Something!
    else
      p Something else!

  html: |
    <ul>
      {{#each person in people}}
        <li>{{person}}</li>
      {{/each}}
    </ul>

    {{#linkTo "home"}}
      Link Text
    {{/linkTo}}

    {{list nav id="nav-bar" class="top"}}
      <a href="{{url}}">{{title}}</a>
    {{/list}}

    {{#strong}}
      {{something}}
    {{/strong}}

    {{#if something}}
      <p>Something!</p>
    {{else}}
      <p>Something else!</p>
    {{/if}}

-
  title: Condensed Nesting with Colon Separator (NEW)

  docs: |
    You can condense nested HTML or block mustache content into a single line by using `:` to terminate the present element or block mustache declaration.

    Whatever comes after a statement-terminating `:` will be interpreted as if it were moved to the line below and indented. This allows you to quickly alternate between nesting HTML elements and mustache blocks on a single line when it makes sense.

    This should come in handy for scaffolding frameworks like Twitter Bootstrap (the first part of the example on the right is Bootstrap scaffolding code).

  emblem: |
    #content-frame: .container: .row:
      .span4: render "sidebar"
      .span8: render "main"

    footer: ul.menu-items: each menu_items: li: a.menu-link href=url: link_text

  html: |
    <div id="content-frame">
      <div class="container">
        <div class="row">
          <div class="span4">
            {{render "sidebar"}}
          </div>
          <div class="span8">
            {{render "main"}}
          </div>
        </div>
      </div>
    </div>
    <footer>
      <ul class="menu-items">
        {{#each menu_items}}
          <li>
            <!-- of course, in an Ember.js context, href will be set via a bindAttr -->
            <a class="menu-link" href="{{url}}">{{link_text}}</a>
          </li>
        {{/each}}
      </ul>
    </footer>

-
  title: Views

  ember: true

  docs: |
    You can quickly and easily include an Ember.js view by starting a line with a capitalized letter. This will automatically wrap the line with a `{{view}}` helper.

  emblem: |
    .field
      Ember.TextField valueBinding="firstName"

  html: |
    <div class="field">
      {{view Ember.TextField valueBinding="firstName"}}
    </div>

-
  title: bindAttr Shorthand

  ember: true

  docs: |
    Emblem.js makes binding expression attributes (via `bindAttr`) clean and simple.

  emblem: |
    img src=logoUrl alt="Logo"

    div class=condition:whenTrue:whenFalse

    div class={ condition1:whenTrue:whenFalse condition2:whenTrue:whenFalse }

  html: |
    <img {{bindAttr src="logoUrl"}} alt="Logo">

    <div {{bindAttr class="condition:whenTrue:whenFalse"}}></div>

    <div {{bindAttr class="condition1:whenTrue:whenFalse condition2:whenTrue:whenFalse"}}></div>

-
  title: Action / Events Shorthand

  ember: true

  docs: |
    Like with HTML5 elements, Emblem is aware of common Ember action names, such as `click`, `submit`, `mouseEnter`, etc. When you use these as attributes, they'll be converted to `action` helpers.

  emblem: |
    a click="toggleHeader" x

    a click="toggleHeader target='view'" x

    a click="toggleHeader this" x

    form submit="submitTheForm foo"
      p Hello

  html: |
    <a {{action toggleHeader on="click"}}>x</a>
    
    <a {{action toggleHeader on="click" target="view"}}>x</a>

    <a {{action toggleHeader this on="click"}}>x</a>

    <form {{action submitTheForm foo on="submit"}}><p>Hello</p></form>
-
  title: Explicit Attribute Expressions

  ember: true

  docs: |
    To use expressions within the element attributes (often used in Ember with `bindAttr` and `action`), use the `{}` syntax after the element.

    Multiple attribute expressions are also supported.

  emblem: |
    button{action "delete"} Delete

    img{bindAttr src="logoUrl"} alt="logo"

    a{bindAttr class="isActive"}{action 'toggleHeader'} x

  html: |
    <button {{action "delete"}}>Delete</button>

    <img {{bindAttr src="logoUrl"}} alt="logo">

    <a {{bindAttr class="isActive"}} {{action "toggleHeader"}}>x</a>

-
  title: In-Tag Mustache

  docs: |
    Occasionally, you'll want to put mustache content inside the opening tag of an HTML element. You can do this by immediately following the tag content with curly braces.

    Note: instead of using this for Ember's `bindAttr`, you can use Emblem's `bindAttr` syntax described below in Implicit Bind Attributes.

  emblem: |
    span.some-class{ someHelper } Hello

  html: |
    <span class="some-class" someHelperOutput="foo">Hello</span>

-
  title: Vanilla Handlebars Partials

  docs: |
    To invoke partials with non-Emberized Handlebars, you can use the `>` syntax.

    Note that you'll never really use this for Ember apps; rather, in those cases, you'd use the `partial` helper.

    Also note that there's no good way to precompile partials other than to precompile them as templates and then run `Handlebars.partials = Handlebars.templates` before any rendering has taken place.

    If you're not precompiling, and you want to directly register an Emblem template, you can use `Emblem.registerPartial`. 

  emblem: |
    > partialName

    p Check out this partial: #{> partialName}

    > partialName foo

  html: |
    {{>partialName}}

    <p>Check out this partial: {{>partialName}}</p>

    {{>partialName foo}}

-
  title: Anything wrong or missing here?

  docs: |
    These docs are [open source](https://github.com/machty/emblem-site), so help us tweak and refine them!

    If you're feeling particularly lazy and want to just report an error, [Submit a docs issue](https://github.com/machty/emblem-site/issues/new?title=emblem.js%20plz%20help)
    for some clarification on how Emblem.js can be used.



# # Title
# -
#   docs: |
#     ### Title
#     description
#   emblem: |
#     Emblem
#   html: |
#     Html result
