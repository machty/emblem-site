-
  title: Lists (Block Expression Shorthand)

  docs: |
    Emblem allows you to use `=` shorthand with block expressions. Because of this, you can achieve pretty succinct list declarations.

  emblem: |

    ul
      = each items as |item|
        li Item name: #{item.name}

    / Shorter version:

    ul = each items as |item|
      li Item name: #{item.name}

  html: |
    <ul>
      {{#each items as |item|}}
        <li>Item name: {{item.name}}
      {{/each}}
    </ul>


-
  title: link-to (Text Content for Block Expressions)

  docs: |
    Some block helpers, such as Ember's `link-to`, are often used with a small chunk of text as the content of the block. Emblem provides a shorthand in these instance: use a pipe '|' to separate a block helper declaration from its text content.

  emblem: |

    / The following three are equivalent
    = link-to "home.index"
      | Home

    = link-to "Home" "home.index"

    = link-to "home.index" | Home

    = link-to "items.list" (query-params page=2) | Go to page 2

    ul
      li = link-to "index" | Home
      li = link-to "about" | About Us


  html: |
    {{#link-to "home.index"}}Home{{/link-to}}

    {{#link-to "items.list" (query-params page=2)}}Go to page 2{{/link-to}}

    <ul>
      <li>{{#link-to "index"}}Home{{/link-to}}</li>
      <li>{{#link-to "about"}}About Us{{/link-to}}</li>
    </ul>


-
  title: Colon Syntax for Inlining Nested Content

  docs: |
    The colon separator is a way of nesting content on a single line. It's essentially an alternative to a newline followed by indented content.

    Whatever comes after a statement-terminating `:` will be interpreted as if it were moved to the line below and indented. This allows you to quickly alternate between nesting HTML elements and mustache blocks on a single line when it makes sense.

    This should come in handy for scaffolding frameworks like Twitter Bootstrap (the first part of the example on the right is Bootstrap scaffolding code).

  emblem: |
    / You could write something like this:
    .container
      .row
        .span12
          p Hello

    / Or you could write something like this:
    .container: .row: .span12: p Hello

    / It works for mustache blocks too:
    li
      link-to 'posts'
        span = linkText

    / With colons:
    li: link-to 'posts': span: linkText

    / You can consistently use it, even for simple cases.
    legend: title
    legend = title

    / You can nest groups
    #content-frame: .container: .row
      .span4: = list-item "sidebar"
      .span8: = list-item "main"


-
  title: HTML Attribute Shorthand for Ember Helpers

  docs: |
    *\*when using with [Ember.js](http://emberjs.com)*

    You can use `%`, `#`, and `.` to set hash values for `tagName`, `elementId`, and `class`, respectively, on a Handlebars helper invocation.

    This is most helpful for the various `view` helpers that Ember provides.

  emblem: |
    .field
      Ember.View%p#the-id.some-class
        | Nested content

      Ember.View %span#the-id.some-class
        | Adding a space before % also works.

  html: |
    <div class="field">
      {{#view Ember.View tagName="p" elementId="the-id" class="some-class"}}Nested content{{/view}}

      {{#view Ember.View tagName="span" elementId="the-id" class="some-class"}}Adding a space before % also works.{{/view}}
    </div>


-
  title: Ember input helper

  docs: |
    Keep in mind that the `input` helper provided by Ember must be used with preceding `=`. If you use it like a normal tag, the `value` will be bound read only and the bound object won't be changed when typing.

  emblem: |

    input value=name id="noEmberHelper" class="wrong possible-headache"

    = input value=name id="withEmberHelper" class="right"

  html: |
    <input value="Wayne" id="..."/>
-
  title: More on the way...

  docs: |
    We'll be updating this section periodically as the patterns come in from the wild.

    Know a great Emblem trick? [Submit one!](https://github.com/machty/emblem-site/issues/new?title=an%20awesome%20emblem.js%20trick&labels=website%20tweak)

