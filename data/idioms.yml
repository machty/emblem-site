-
  title: Lists (Block Expression Shorthand)

  docs: |
    Emblem allows you to use `=` shorthand with block expressions. Because of this, you can achieve pretty succinct list declarations.

  emblem: |

    ul
      each items
        li Item name: #{name}

    / Shorter version:

    ul = each items
      li Item name: #{name}

  html: |
    <ul>
      {{#each items}}
        <li>Item name: {{name}}
      {{/each}}
    </ul>

-
  title: linkTo (Text Content for Block Expressions)

  docs: |
    Some block helpers, such as Ember's `linkTo`, are often used with a small chunk of text as the content of the block. Emblem provides a shorthand in these instance: use a pipe '|' to separate a block helper declaration from its text content.

  emblem: |

    / The following three are equivalent
    = linkTo "home"
      | Home

    = linkTo "home" | Home

    linkTo "home" | Home

    ul
      li = linkTo "index" | Home
      li = linkTo "about" | About Us


  html: |
    {{#linkTo "home"}}Home{{/linkTo}}

    <ul>
      <li>{{#linkTo "index"}}Home{{/linkTo}}</li>
      <li>{{#linkTo "about"}}About Us{{/linkTo}}</li>
    </ul>

-
  title: Colon Syntax for Inlining Nested Content

  docs: |
    The colon separator is a way of nesting content on a single line. It's essentially an alternative to a newline followed by indented content.

  emblem: |
    / You could write something like this:
    .container
      .row
        .span12
          p Hello

    / Or you could write something like this:
    .container: .row: .span12: p Hello

    / It works for mustache blocks too:
    li
      linkTo 'posts'
        span = linkText

    / With colons:
    li: linkTo 'posts': span: linkText
        
    / You can consistently use it, even for simple cases.
    legend: title 
    legend = title

-
  title: HTML Attribute Shorthand for Ember Helpers

  docs: |
    *\*when using with [Ember.js](http://emberjs.com)*

    You can use `%`, `#`, and `.` to set hash values for `tagName`, `elementId`, and `class`, respectively, on a Handlebars helper invocation.

    This is most helpful for the various `view` helpers that Ember provides.

  emblem: |
    .field
      Ember.View%p#the-id.some-class
        | Nested content

      Ember.View %span#the-id.some-class
        | Adding a space before % also works.

  html: |
    <div class="field">
      {{#view Ember.View tagName="p" elementId="the-id" class="some-class"}}Nested content{{/view}}

      {{#view Ember.View tagName="span" elementId="the-id" class="some-class"}}Adding a space before % also works.{{/view}}
    </div>

-
  title: each/else

  docs: |
    This isn't strictly an Emblem pattern, but keep in mind that the `each` helper excepts an optional `else` portion that will be displayed when the list is empty or nonexistent.

  emblem: |

    each things
      p = name
    else
      p There are no things!

  html: |
    {{#each things}}
      <p>{{name}}</p>
    {{else}}
      <p>There are no things!</p>
    {{/each}}

-
  title: More on the way...

  docs: |
    We'll be updating this section periodically as the patterns come in from the wild.

    Know a great Emblem trick? [Submit one!](https://github.com/machty/emblem-site/issues/new?title=an%20awesome%20emblem.js%20trick&labels=website%20tweak)

